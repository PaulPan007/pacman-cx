package main

import "gl"
import "glfw"
import "graphical2d"

var x_cells i32 = 28
var y_cells i32 = 31

var CELL_WIDTH f32 = 0.07143
var CELL_HEIGHT f32 = 0.0645

// Game constatnts
var WIDTH_WINDOW i32 = 840
var HEIGHT_WINDOW i32 = 930

// Keyboard Keys
var RIGHT_ARROW_KEY i32 = 262
var LEFT_ARROW_KEY i32 = 263
var DOWN_ARROW_KEY i32 = 264
var UP_ARROW_KEY i32 = 265

// Game flags
var GAME_LEVEL i32 = 1
var GAME_MAX_LEVEL i32 = 10
var GAME_OVER bool = false
var PLAYER_LIVES i32 = 3

// Item Types
var PATH_CELL i32 = 3
var WALL_CELL i32 = 1
var PATH_CELL_WITH_SIMPLE_POINT i32 = 0
var PATH_CELL_WITH_SUPER_POINT i32 = 2
var TELEPORT_CELL i32 = 4
var GATE_CELL i32 = 5

// Ghost constants
var GHOST_RADIUS f32 = 0.025
var GHOST_SPAWN_LINE f32 = 11.0
var GHOST_SPAWN_COLLUMN f32 = 13.0

// Ghost Types
var SHADOW_GHOST i32 = 0
var SPEEDY_GHOST i32 = 1
var BASHFUL_GHOST i32 = 2
var POKEY_GHOST i32 = 3

// Ghost Scatter Points
var SHADOW_SCATTER_LINE     i32 = 2
var SHADOW_SCATTER_COLLUMN  i32 = 26
var SPEEDY_SCATTER_LINE     i32 = 2
var SPEEDY_SCATTER_COLLUMN  i32 = 1
var BASHFUL_SCATTER_LINE    i32 = 28
var BASHFUL_SCATTER_COLLUMN i32 = 26
var POKEY_SCATTER_LINE      i32 = 28
var POKEY_SCATTER_COLLUMN   i32 = 1

// Point constants
var SIMPLE_POINT_RADIUS f32 = 0.01
var SUPER_POINT_RADIUS f32 = 0.015
var POINT_COLOR_RED f32 = 1.0
var POINT_COLOR_GREEN f32 = 1.0
var POINT_COLOR_BLUE f32 = 1.0

// Player constants
var PLAYER_COLOR_RED f32 = 1.0
var PLAYER_COLOR_GREEN f32 = 1.0
var PLAYER_COLOR_BLUE f32 = 0.0
var PLAYER_RADIUS f32 = 0.025
var PLAYER_SPAWN_LINE i32 = 23
var PLAYER_SPAWN_COLLUMN i32 = 13

// Ghost modes
var GHOST_MODE_CHASE i32 = 0
var GHOST_MODE_SCATTER i32 = 1
var GHOST_MODE_FRIGHTENED i32 = 2
var GHOST_MODE_IN_HOUSE i32 = 3

// Game timers
var GHOST_CHASE_TIMER f64 = 0.0D
var GHOST_CHASE_LIMIT f64 = 20.0D

var GHOST_SCATTER_TIMER f64 = 0.0D
var GHOST_SCATTER_LIMIT f64 = 5.0D

var GHOST_FRIGHTENED_TIMER f64 = 0.0D
var GHOST_FRIGHTENED_SEMI_LIMIT f64 = 2.0D
var GHOST_FRIGHTENED_LIMIT f64 = 5.0D

var GHOST_RELEASE_TIMER f64 = 0.0D
var GHOST_RELEASE_LIMIT f64 = 5.0D

var GHOST_MOVEMENT_TIMER f64 = 0.0D
var GHOST_MOVEMENT_LIMIT f64 = 0.5D

// Animation timers
var PLAYER_ANIMATION_TIMER f64 = 0.0D
var PLAYER_ANIMATION_SEMI_LIMIT f64 = 0.25D
var PLAYER_ANIMATION_LIMIT f64 = 0.5D

var GHOST_ANIMATION_TIMER f64 = 0.0D
var GHOST_ANIMATION_SEMI_LIMIT f64 = 0.25D
var GHOST_ANIMATION_LIMIT f64 = 0.5D

var POINT_ANIMATION_TIMER f64 = 0.0D
var POINT_ANIMATION_SEMI_LIMIT f64 = 0.2D
var POINT_ANIMATION_LIMIT f64 = 0.4D

// Timer modifiers
var GHOST_RELESE_MODIFIER f64 = 0.5D
var GHOST_MOVEMENT_MODIFIER f64 = 0.05D
var GHOST_FRIGHTENED_SEMI_MODIFIER f64 = 0.2D
var GHOST_FRIGHTENED_MODIFIER f64 = 0.5D
var GHOST_RELEASE_MODIFIER f64 = 0.5D
var GHOST_CHASE_MODIFIER f64 = 2.0D
var GHOST_SCATTER_MODIFIER f64 = 0.5D

// Lives Variables
var LIFE_SPAWN_LINE i32 = 30
var LIFE_SPAWN_COLLUMN i32 = 26
var LIFE_COLOR_RED f32 = 1.0
var LIFE_COLOR_GREEN f32 = 0.0
var LIFE_COLOR_BLUE f32 = 0.0
var LIFE_RADIUS f32 = 0.02

// Directions
var UP i32 = 0
var DOWN i32 = 1
var LEFT i32 = 2
var RIGHT i32 = 3

var SCORE i32 = 0

// Declaration of structss
type Player struct {
  position graphical2d.Position2D      // 2D position (x, y)
  color graphical2d.Color              // RGB color (r, g, b)
  radius f32
  direction i32
  index_x i32
  index_y i32
}
var player Player

type Cell struct {
  position graphical2d.Position2D
  dimensions graphical2d.Dimensions2D
  color graphical2d.Color
  index_x i32
  index_y i32
  ctype i32
}
var cells [31][28]Cell

type Ghost struct {
  position graphical2d.Position2D
  color graphical2d.Color
  radius f32
  index_x i32
  index_y i32
  direction i32
  gtype i32
  status i32
  last_event_time f64
}
var ghosts [4]Ghost

type Point struct {
  position graphical2d.Position2D
  color graphical2d.Color
  radius f32
  ptype i32
  index_x i32
  index_y i32
  active bool
}
var points [1000] Point
var points_count i32 = 0


/***************************************
 * Declaration of constructor functions.
***************************************/

/* Function     : newPlayer
   Input        : Spawn line (line i32)
                : Spawn collumn (collumn i32)
                : Radius (rad f32)
   Output       : player (pl Player)
   Desctription : Constructor for the Player struct.
*/
func newPlayer (line i32, collumn i32, rad f32) (pl Player) {
  var pos graphical2d.Position2D
  pos := coords2position(line, collumn)

  var col graphical2d.Color
  col = graphical2d.newColor(PLAYER_COLOR_RED, PLAYER_COLOR_GREEN, PLAYER_COLOR_BLUE)

  var pl Player
  pl = Player{
    position: pos,
    color: col,
    radius: rad,
    direction: RIGHT,
    index_x: collumn,
    index_y: line}
  return pl
}

/* Function     : newCell
   Input        : Spawn line (line i32)
                : Spawn collumn (collumn i32)
                : Cell type (ct i32)
   Output       : cell (cell Cell)
   Desctription : Constructor for the Cell struct.
*/
func newCell (line i32, collumn i32, ct i32) (cell Cell) {
  var pos graphical2d.Position2D
  pos = coords2position(line, collumn)

  var dim graphical2d.Dimensions2D
  dim = graphical2d.newDimensions2D(CELL_HEIGHT, CELL_WIDTH)

  var cell Cell
  cell = Cell{
    position: pos,
    dimensions: dim,
    color: getCellColor(ct),
    index_x: collumn,
    index_y: line,
    ctype: ct}
  return block
}

/* Function     : newGhost
   Input        : Spawn line (line i32)
                : Spawn collumn (collumn i32)
                : Ghost type (gt i32)
                : Ghost movement mode (ghost_mode i32)
   Output       : ghost (ghost Ghost)
   Desctription : Constructor for the Ghost struct.
*/
func newGhost(line i32, collumn i32, gt i32, ghost_mode i32) (ghost Ghost){
  var pos graphical2d.Position2D
  pos = coords2position(line, collumn)

  var col graphical2d.Color
  col = getGhostColor(gt)

  var ghost Ghost
  ghost = Ghost{
    position: pos,
    color: col,
    radius: GHOST_RADIUS,
    index_x: collumn,
    index_y: line,
    direction: UP,
    gtype: gt,
    status: ghost_mode,
    last_event_time: 0.0D}
  return ghost
}

/* Function     : newPoint
   Input        : Spawn line (line i32)
                : Spawn collumn (collumn i32)
                : Point type (pt i32)
   Output       : point (point Point)
   Desctription : Constructor for the Point struct.
*/
func newPoint (line i32, collumn i32, pt i32) (point Point) {
  var pos graphical2d.Position2D
  pos = coords2position(line, collumn)

  var col graphical2d.Color
  col = graphical2d.newColor(POINT_COLOR_RED, POINT_COLOR_GREEN, POINT_COLOR_BLUE)

  var rad f32
  if i32.eq(pt, PATH_CELL_WITH_SIMPLE_POINT) {
    rad = SIMPLE_POINT_RADIUS
  }
  if i32.eq(pt, PATH_CELL_WITH_SUPER_POINT) {
    rad = SUPER_POINT_RADIUS
  }

  var point Point
  point = Point {
    position: pos,
    color: col,
    radius: rad,
    ptype: pt,
    index_x: collumn,
    index_y: line,
    active: true}
  return point
}


/***************************************
 * Color management functions.
***************************************/

/* Function     : getCellColor
   Input        : Cell type (ctype i32)
   Output       : The cell color (color graphical2d.Color)
   Desctription : Returns the color corresponding to the cell type.
*/
func getCellColor (ctype i32) (color graphical2d.Color) {
  var color graphical2d.Color

  if i32.eq(ctype, PATH_CELL) {
    color = graphical2d.newColor(0.0, 0.0, 0.0)
  }
  if i32.eq(ctype, WALL_CELL) {
    color = graphical2d.newColor(0.0, 0.0, 1.0)
  }
  if i32.eq(ctype, TELEPORT_CELL) {
    color = graphical2d.newColor(0.0, 1.0, 1.0)
  }
  if i32.eq(ctype, GATE_CELL) {
    color = graphical2d.newColor(1.0, 0.5, 0.0)
  }

  return color
}

/* Function     : getGhostColor
   Input        : Ghost type (gtype i32)
   Output       : The ghost color (color graphical2d.Color)
   Desctription : Returns the color corresponding to the ghost type.
*/
func getGhostColor (gtype i32) (color graphical2d.Color) {
  var color graphical2d.Color

  if i32.eq(gtype, SHADOW_GHOST) {
    color = graphical2d.newColor(1.0, 0.0, 0.0) // Red color
  }
  if i32.eq(gtype, SPEEDY_GHOST) {
    color = graphical2d.newColor(1.0, 0.5, 1.0) // Pink color
  }
  if i32.eq(gtype, BASHFUL_GHOST) {
    color = graphical2d.newColor(0.0, 1.0, 1.0) // Cyan color
  }
  if i32.eq(gtype, POKEY_GHOST) {
    color = graphical2d.newColor(1.0, 0.5, 0.25) // Orange color
  }

  return color
}


/***************************************
 * Movement related functions.
***************************************/

/* Function     : canMove
   Input        : movement direction (direction i32)
                : vertical board position (line i32)
                : horizontal board position (collumn i32)
   Output       : true (if movement is possible), false (otherwise)
   Desctription : Checks if a game object located at (line/collumn) can move in the input (direction).
*/
func canMove(direction i32, line i32, collumn i32) (can_move bool)  {
  var can_move bool = false
  if bool.and(i32.eq(direction, UP), i32.eq(cells[i32.sub(line, 1)][collumn].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, DOWN), i32.eq(cells[i32.add(line, 1)][collumn].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, LEFT), i32.eq(cells[line][i32.sub(collumn, 1)].ctype, PATH_CELL)) {
    can_move = true
  }
  if bool.and(i32.eq(direction, RIGHT), i32.eq(cells[line][i32.add(collumn, 1)].ctype, PATH_CELL)) {
    can_move = true
  }
  return can_move
}

/* Function     : movePlayer
   Input        : Direction in which the player should move (direction i32)
   Desctription : Manages the player movement.
*/
func movePlayer(direction i32) () {
  if bool.eq(canMove(direction, player.index_y, player.index_x), true) {
    // Move Up
    if i32.eq(direction, UP) {
      player.index_y = i32.sub(player.index_y, 1)
    }
    // Move Down
    if i32.eq(direction, DOWN) {
      player.index_y = i32.add(player.index_y, 1)
    }
    // Move Left
    if i32.eq(direction, LEFT) {
      player.index_x = i32.sub(player.index_x, 1)
    }
    // Move Right
    if i32.eq(direction, RIGHT) {
      player.index_x = i32.add(player.index_x, 1)
    }
    // Update the current player direction
    player.direction = direction
    // Update the player position
    player.position = coords2position(player.index_y, player.index_x)
  }

  // Check for collisions with ghosts
  // FIX ME remove double collision check
  for i:=0; i<4; i++ {
    checkPlayerGhostCollision(ghosts[i])
  }
}

/* Function     : canMove
   Input        : Ghost to move (ghost Ghost)
   Desctription : Manages the player movement.
*/
func moveGhost(ghost Ghost) () {
  var direction i32

  // Calculates the ghost moving direction depending on the current mode mode
  if i32.eq(ghost.status, GHOST_MODE_CHASE) {
    direction = ghostChaseDirection(ghost)
  }
  if i32.eq(ghost.status, GHOST_MODE_SCATTER) {
    direction = ghostScatterDirection(ghost)
  }
  if bool.or(i32.eq(ghost.status, GHOST_MODE_FRIGHTENED), i32.eq(ghost.status, GHOST_MODE_IN_HOUSE)) {
    direction = randomGhostDirection(ghost)
  }
  ghosts[ghost.gtype].direction = direction

  if i32.eq(direction, UP) {
    ghosts[ghost.gtype].index_y = i32.sub(ghost.index_y, 1)
  }
  if i32.eq(direction, DOWN) {
    ghosts[ghost.gtype].index_y = i32.add(ghost.index_y, 1)
  }
  if i32.eq(direction, LEFT) {
    ghosts[ghost.gtype].index_x = i32.sub(ghost.index_x, 1)
  }
  if i32.eq(direction, RIGHT) {
    ghosts[ghost.gtype].index_x = i32.add(ghost.index_x, 1)
  }
  // Update ghost position
  ghosts[ghost.gtype].position = coords2position(ghosts[ghost.gtype].index_y, ghosts[ghost.gtype].index_x)
}

/* Function     : calculateGhostDirection
   Input        : Ghost in scatter or chase mode (ghost Ghost)
                : Target line for the ghost (target_line i32)
                : Target collumn for the ghost (target_collumn i32)
   Output       : Best direction (direction i32)
   Desctription : Returns the direction of the shortest path between the ghost
                  and the target board position.
*/
func calculateGhostDirection(ghost Ghost, target_line i32, target_collumn i32) (direction i32) { // FIX ME no spaghetti code
  var direction i32
  var min_distance i32 = 100 // Infinite

  var distance_left i32
  if bool.and(bool.not(i32.eq(ghost.direction, RIGHT)), canMove(LEFT, ghost.index_y, ghost.index_x)) {
    distance_left = i32.add(i32.abs(i32.sub(target_collumn, i32.sub(ghost.index_x, 1))), i32.abs(i32.sub(target_line, ghost.index_y)))
    if i32.lt(distance_left, min_distance) {
      min_distance = distance_left
      direction = LEFT
    }
  }

  var distance_right i32
  if bool.and(bool.not(i32.eq(ghost.direction, LEFT)), canMove(RIGHT, ghost.index_y, ghost.index_x)) {
    distance_right = i32.add(i32.abs(i32.sub(target_collumn, i32.add(ghost.index_x, 1))), i32.abs(i32.sub(target_line, ghost.index_y)))
    if i32.lt(distance_right, min_distance) {
      min_distance = distance_right
      direction = RIGHT
    }
  }

  var distance_up i32
  if bool.and(bool.not(i32.eq(ghost.direction, DOWN)), canMove(UP, ghost.index_y, ghost.index_x)) {
    distance_up = i32.add(i32.abs(i32.sub(target_collumn, ghost.index_x)), i32.abs(i32.sub(target_line, i32.sub(ghost.index_y, 1))))
    if i32.lt(distance_up, min_distance) {
      min_distance = distance_up
      direction = UP
    }
  }

  var distance_down i32
  if bool.and(bool.not(i32.eq(ghost.direction, UP)), canMove(DOWN, ghost.index_y, ghost.index_x)) {
    distance_down = i32.add(i32.abs(i32.sub(target_collumn, ghost.index_x)), i32.abs(i32.sub(target_line, i32.add(ghost.index_y, 1))))
    if i32.lt(distance_down, min_distance) {
      min_distance = distance_down
      direction = DOWN
    }
  }

  return direction
}

/* Function     : calculateGhostDirection
   Input        : Ghost in chase mode (ghost Ghost)
   Output       : Best direction (direction i32)
   Desctription : Returns the direction of the shortest path between the ghost
                  and the player.
*/
func ghostChaseDirection(ghost Ghost) (direction i32) {
  var direction i32
  direction = calculateGhostDirection(ghost, player.index_y, player.index_x)
  return direction
}

/* Function     : calculateGhostDirection
   Input        : Ghost in scatter mode (ghost Ghost)
   Output       : Best direction (direction i32)
   Desctription : Returns the direction of the shortest path between the ghost
                  and the corresponding scatter board position.
*/
func ghostScatterDirection(ghost Ghost) (direction i32) {
  var direction i32

  if i32.eq(ghost.gtype, SHADOW_GHOST) {
    direction = calculateGhostDirection(ghost, SHADOW_SCATTER_LINE, SHADOW_SCATTER_COLLUMN)
  }
  if i32.eq(ghost.gtype, SPEEDY_GHOST) {
    direction = calculateGhostDirection(ghost, SPEEDY_SCATTER_LINE, SPEEDY_SCATTER_COLLUMN)
  }
  if i32.eq(ghost.gtype, BASHFUL_GHOST) {
    direction = calculateGhostDirection(ghost, BASHFUL_SCATTER_LINE, BASHFUL_SCATTER_COLLUMN)
  }
  if i32.eq(ghost.gtype, POKEY_GHOST) {
    direction = calculateGhostDirection(ghost, POKEY_SCATTER_LINE, POKEY_SCATTER_COLLUMN)
  }

  return direction
}

/* Function     : randomGhostDirection
   Input        : Ghost in frightened or caged (ghost Ghost)
   Output       : Random direction (direction i32)
   Desctription : Returns a random possible direction for the ghost.
*/
func randomGhostDirection(ghost Ghost) (direction i32) {
  var direction i32
  direction = i32.rand(0, 4)

  for bool.not(bool.and(bool.not(i32.eq(direction, reverseDirection(ghost.direction))), canMove(direction, ghost.index_y, ghost.index_x))) {
    direction = i32.rand(0, 4)
  }

  return direction
}

/* Function     : reverseDirection
   Input        : Current direction (direction i32)
   Output       : Opposite direction (reverse i32)
   Desctription : Returns the opposite direction of the input.
*/
func reverseDirection(direction i32) (reverse i32) {
  var reverse i32

  if i32.eq(direction, UP) {
    reverse = DOWN
  }
  if i32.eq(direction, DOWN) {
    reverse = UP
  }
  if i32.eq(direction, LEFT) {
    reverse = RIGHT
  }
  if i32.eq(direction, RIGHT) {
    reverse = LEFT
  }

  return reverse
}

/* Function     : coords2position
   Input        : Vertical board position (line i32)
                : Horizontal board position (collumn i32)
   Output       : A position in the game screen (position graphical2d.Position2D)
   Desctription : Maps a (line/collumn) pair into an actual screen coordinates
*/
func coords2position(line i32, collumn i32) (position graphical2d.Position2D) {
  x := f32.add(-1.0, f32.add(f32.mul(i32.f32(collumn), CELL_WIDTH), f32.div(CELL_WIDTH, 2.0)))
  y := f32.sub(1.0, f32.add(f32.mul(i32.f32(line), CELL_HEIGHT), f32.div(CELL_HEIGHT, 2.0)))

  position := graphical2d.newPosition2D(x, y)

  return position
}


/***************************************
 * Ghost behavior functions.
***************************************/

func updateGhostMode(ghost Ghost) () {
  if i32.eq(ghost.status, GHOST_MODE_CHASE) {
    if isTimerOver(GHOST_CHASE_TIMER, GHOST_CHASE_LIMIT) {
      ghosts[ghost.gtype].status = GHOST_MODE_SCATTER
      GHOST_SCATTER_TIMER = glfw.GetTime()
    }
  }

  if i32.eq(ghost.status, GHOST_MODE_SCATTER) {
    if isTimerOver(GHOST_SCATTER_TIMER, GHOST_SCATTER_LIMIT) {
      ghosts[ghost.gtype].status = GHOST_MODE_CHASE
      GHOST_CHASE_TIMER = glfw.GetTime()
    }
  }

  if i32.eq(ghost.status, GHOST_MODE_FRIGHTENED) {
    if isTimerOver(GHOST_FRIGHTENED_TIMER, GHOST_FRIGHTENED_LIMIT) {
      ghosts[ghost.gtype].status = GHOST_MODE_CHASE
      GHOST_CHASE_TIMER = glfw.GetTime()
    }
  }
}

func releaseGhost() () {
  for i:=0; i<4; i++ {
    if i32.eq(ghosts[i].status, GHOST_MODE_IN_HOUSE) {
      ghosts[i].index_x = f32.i32(GHOST_SPAWN_COLLUMN)
      ghosts[i].index_y = f32.i32(GHOST_SPAWN_LINE)
      ghosts[i].status = GHOST_MODE_CHASE
      return;
    }
  }
}

func isTimerOver(timer f64, limit f64) (is_over bool) {
  var is_over bool = false
  if gteq(f64.sub(glfw.GetTime(), timer), limit) {
    is_over = true
  }
  return is_over
}


// Collision manager functions

func checkPlayerGhostCollision(ghost Ghost) () {
  if bool.and(i32.eq(player.index_x, ghost.index_x), i32.eq(player.index_y, ghost.index_y)) {
    if i32.eq(ghost.status, GHOST_MODE_FRIGHTENED) {
      ghosts[ghost.gtype].index_x = 14
      ghosts[ghost.gtype].index_y = 13
      ghosts[ghost.gtype].status = GHOST_MODE_IN_HOUSE
    }

    if bool.or(i32.eq(ghost.status, GHOST_MODE_CHASE), i32.eq(ghost.status, GHOST_MODE_SCATTER)) {
      PLAYER_LIVES = i32.sub(PLAYER_LIVES, 1)
      if i32.lteq(PLAYER_LIVES, 0) {
        GAME_OVER = true
        str.print("------ GAME OVER ------") // FIX ME add game over screen
      } else {
        player = newPlayer(PLAYER_SPAWN_LINE, PLAYER_SPAWN_COLLUMN, PLAYER_RADIUS)
      }
    }
  }
}


// Game Object render functions

/* Function     : renderGame
   Input        : OpenGL program (program i32)
   Desctription : Responsible for managing the rendering process of all the game
                  objects.
*/
func renderGame(program i32) () {
  var i i32
  var j i32

  gl.Clear(gl.COLOR_BUFFER_BIT)
  gl.Enable(gl.TEXTURE_2D)
  gl.UseProgram(program)

  renderBoard()  // Render Board
  renderPlayer()    // Render Player

  // Render Points
  for i=0; i<points_count; i++ {
    if bool.eq(points[i].active, true) {
      renderPoint(points[i])
    }
  }

  // Render Ghosts
  for i=0; i<4; i++ {
      renderGhost(ghosts[i])
  }

  renderLives() // Render Lives
  renderLevel()
}

/* Function     : renderBoard
   Desctription : Renders the game board
*/
func renderBoard() () {
  for i:=0; i<y_cells; i++ {
    for j:=0; j<x_cells; j++ {
      graphical2d.drawRectangle(cells[i][j].position, cells[i][j].dimensions, cells[i][j].color)
    }
  }
}

/* Function     : renderPlayer
   Desctription : Renders the player
*/
func renderPlayer() () {
  if isTimerOver(PLAYER_ANIMATION_TIMER, PLAYER_ANIMATION_SEMI_LIMIT) {
    graphical2d.drawPlayer2(player.position, player.radius, player.color)
  } else {
    graphical2d.drawCircle(player.position, player.radius, player.color)
  }

  if isTimerOver(PLAYER_ANIMATION_TIMER, PLAYER_ANIMATION_LIMIT) {
    PLAYER_ANIMATION_TIMER = glfw.GetTime()
  }
}

/* Function     : renderGhost
   Desctription : Renders a ghost
*/
func renderGhost(ghost Ghost) () {
  var color graphical2d.Color

  if i32.eq(ghost.status, GHOST_MODE_FRIGHTENED) {
    if bool.and(isTimerOver(GHOST_ANIMATION_TIMER, GHOST_ANIMATION_SEMI_LIMIT), isTimerOver(GHOST_FRIGHTENED_TIMER, GHOST_FRIGHTENED_SEMI_LIMIT)) {
      color = graphical2d.newColor(1.0, 1.0, 1.0)
    } else {
      color = graphical2d.newColor(0.0, 0.0, 1.0)
    }
  } else {
    color = ghost.color
  }

  if isTimerOver(GHOST_ANIMATION_TIMER, GHOST_ANIMATION_SEMI_LIMIT) {
    graphical2d.drawGhost(ghost.position, ghost.radius, color, 0.5) // FIX ME DrawGhost()
  } else {
    graphical2d.drawGhost(ghost.position, ghost.radius, color, 1.5) // FIX ME DrawGhost2()
  }

  if isTimerOver(GHOST_ANIMATION_TIMER, GHOST_ANIMATION_LIMIT) {
    GHOST_ANIMATION_TIMER = glfw.GetTime()
  }
}

/* Function     : renderPoint
   Desctription : Renders a point
*/
func renderPoint(point Point) () {
  if isTimerOver(POINT_ANIMATION_TIMER, POINT_ANIMATION_SEMI_LIMIT) {
    if i32.eq(point.ptype, PATH_CELL_WITH_SUPER_POINT) {
      graphical2d.drawCircle(point.position, f32.add(point.radius, 0.005), point.color)
    }
    if i32.eq(point.ptype, PATH_CELL_WITH_SIMPLE_POINT) {
      graphical2d.drawCircle(point.position, point.radius, point.color)
    }
  } else {
    graphical2d.drawCircle(point.position, point.radius, point.color)
  }

  if isTimerOver(POINT_ANIMATION_TIMER, POINT_ANIMATION_LIMIT) {
    POINT_ANIMATION_TIMER = glfw.GetTime()
  }
}

/* Function     : renderLives
   Desctription : Renders the player lives
*/
func renderLives() () {
  var color Color
  color = graphical2d.newColor(LIFE_COLOR_RED, LIFE_COLOR_GREEN, LIFE_COLOR_BLUE)

  var position graphical2d.Position2D
  for i:=0; i<PLAYER_LIVES; i++ {
    position = coords2position(LIFE_SPAWN_LINE, i32.sub(LIFE_SPAWN_COLLUMN, i))
    graphical2d.drawLife(position, LIFE_RADIUS, color)
  }
}

func renderLevel() () {
  var color Color
  color = graphical2d.newColor(0.0, 0.0, 1.0)

  var position graphical2d.Position2D
  for i:=0; i<GAME_LEVEL; i++ {
    position = coords2position(30, i32.add(1, i))
    graphical2d.drawSkycoin(position, 0.025, 0.0125, color)
  }
}

func get_board_line(i i32) (line [28]i32) {
    var line [28]i32
    if i32.eq(i, 1) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 2) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 3) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 4) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 5) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 6) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 7) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 8) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 9) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 10) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 11) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  3,  1,  1,  3,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 12) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 13) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  5,  5,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 14) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 15) {
      line = [28]i32{3,  3,  3,  3,  3,  1,  0,  3,  3,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  3,  3,  0,  1,  3,  3,  3,  3,  3}
    }
    if i32.eq(i, 16) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  3,  3,  3,  3,  3,  3,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 17) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 18) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 19) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 20) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  0,  1,  1,  3,  1,  1,  1,  1,  1,  1,  1,  1,  3,  1,  1,  0,  1,  1,  1,  1,  1,  1}
    }
    if i32.eq(i, 21) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 22) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 23) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 24) {
      line = [28]i32{1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  3,  3,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  1}
    }
    if i32.eq(i, 25) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 26) {
      line = [28]i32{1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1}
    }
    if i32.eq(i, 27) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 28) {
      line = [28]i32{1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1}
    }
    if i32.eq(i, 29) {
      line = [28]i32{1,  2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1}
    }
    if i32.eq(i, 30) {
      line = [28]i32{1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1}
    }
    if i32.eq(i, 31) {
      line = [28]i32{1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1}
    }
    return line
}

/***************************************
 * Initialization functions.
***************************************/

/* Function     : initGLFW
   Desctription : Initializes the game window and keyboard input manager.
*/
func initGLFW() () {
  glfw.Init()

  glfw.CreateWindow("window", WIDTH_WINDOW, HEIGHT_WINDOW, "PAC-MAN CX 0.0.3")
  glfw.MakeContextCurrent("window")

	gl.Init()
  gl.Enable(gl.BLEND)
  gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)

  glfw.SetKeyCallback("window", "keyboardManager")
}

/* Function     : initOpenGL
   Output       : OpenGL program (program i32)
   Desctription : Initializes the OpenGL program.
*/
func initOpenGL() (program i32) {
  var program i32
	program = gl.CreateProgram()
  gl.LinkProgram(program)
  return program
}

/* Function     : initScene
   Desctription : Initializes all game objects including the board cells, the
                  points, the ghosts and the player.
*/
func initScene() () {
  var i i32
  var j i32

  // Initialize game board items
  var line [28]i32
  for i=0; i<y_cells; i++ {
    line = get_board_line(i32.add(i, 1))
    for j=0; j<x_cells; j++ {
      initializeItem(i, j, line[j])
    }
  }

  // Initialize player
  player = newPlayer(PLAYER_SPAWN_LINE, PLAYER_SPAWN_COLLUMN, PLAYER_RADIUS)

  // Initialize ghosts
  ghosts[0] = newGhost(11, 13, 0, GHOST_MODE_CHASE)     // Shadow Ghost
  ghosts[1] = newGhost(14, 11, 1, GHOST_MODE_IN_HOUSE)  // Speedy Ghost
  ghosts[2] = newGhost(14, 13, 2, GHOST_MODE_IN_HOUSE)  // Bashful Ghost
  ghosts[3] = newGhost(14, 15, 3, GHOST_MODE_IN_HOUSE)  // Pokey Ghost
}

func initializeItem(line i32, col i32, item_type i32) () {
  //x := f32.add(-1.0, f32.add(f32.mul(i32.f32(col), CELL_WIDTH), f32.div(CELL_WIDTH, 2.0)))
  //y := f32.sub(1.0, f32.add(f32.mul(i32.f32(line), CELL_HEIGHT), f32.div(CELL_HEIGHT, 2.0)))
  if i32.eq(item_type, WALL_CELL) {
    cells[line][col] = newCell(line, col, WALL_CELL)
  }
  if i32.eq(item_type, PATH_CELL) {
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, PATH_CELL_WITH_SIMPLE_POINT) {
    points[points_count] = newPoint(line, col, PATH_CELL_WITH_SIMPLE_POINT)
    points_count = i32.add(points_count, 1)
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, PATH_CELL_WITH_SUPER_POINT) {
    points[points_count] = newPoint(line, col, PATH_CELL_WITH_SUPER_POINT)
    points_count = i32.add(points_count, 1)
    cells[line][col] = newCell(line, col, PATH_CELL)
  }
  if i32.eq(item_type, TELEPORT_CELL) { // FIX ME merge multiple cases together
    cells[line][col] = newCell(line, col, TELEPORT_CELL)
  }
  if i32.eq(item_type, GATE_CELL) {
    cells[line][col] = newCell(line, col, GATE_CELL)
  }
}

/* Function     : isLevelCompleted
   Output       : true if the level is completed, false otherwise.
   Desctription : Checks if all the points on the board were caught allowing the
                  player to progress to the next level if this condition is met.
*/
func isLevelCompleted() (is_completed bool) {
  var is_completed bool = true
  for i:=0; i<points_count; i++ {
    if points[i].active {
      is_completed = false
    }
  }
  return is_completed
}

/* Function     : keyboardManager
   Input        : active window (window str)
                : keyboard key (key i32)
                : scancode (scancode i32)
                : keyboard action (action i32)
                : modifiers (mods i32)
   Desctription : Manages the keyboard inputs.
*/
func keyboardManager(window str, key i32, scancode i32, action i32, mods i32) () {
  if bool.and(i32.eq(key, RIGHT_ARROW_KEY), i32.eq(action, 1)) {
    movePlayer(RIGHT)
  }
  if bool.and(i32.eq(key, LEFT_ARROW_KEY), i32.eq(action, 1)) {
    movePlayer(LEFT)
  }
  if bool.and(i32.eq(key, DOWN_ARROW_KEY), i32.eq(action, 1)) {
    movePlayer(DOWN)
  }
  if bool.and(i32.eq(key, UP_ARROW_KEY), i32.eq(action, 1)) {
    movePlayer(UP)
  }
}

// FIX ME change game settings
/* Function     : levelUp
   Output       : The next level number (level i32).
   Desctription : Checks if all the points on the board were caught allowing the
                  player to progress to the next level if this condition is met.
*/
func levelUp() (){
  if lt.eq(GAME_LEVEL, GAME_MAX_LEVEL) {
    GAME_LEVEL = i32.add(GAME_LEVEL, 1)

    GHOST_RELEASE_LIMIT = f64.sub(GHOST_RELEASE_LIMIT, GHOST_RELESE_MODIFIER)

    GHOST_MOVEMENT_LIMIT = f64.sub(GHOST_MOVEMENT_LIMIT, GHOST_MOVEMENT_MODIFIER)

    GHOST_FRIGHTENED_LIMIT = f64.sub(GHOST_FRIGHTENED_LIMIT, GHOST_FRIGHTENED_MODIFIER)
    GHOST_FRIGHTENED_SEMI_LIMIT = f64.sub(GHOST_FRIGHTENED_SEMI_LIMIT, GHOST_FRIGHTENED_SEMI_MODIFIER)

    GHOST_CHASE_LIMIT = f64.add(GHOST_CHASE_LIMIT, GHOST_CHASE_MODIFIER)
    GHOST_SCATTER_LIMIT = f64.sub(GHOST_SCATTER_LIMIT, GHOST_SCATTER_MODIFIER)
  }
}

func main() {
  var program i32
  initGLFW()
	program = initOpenGL()

  newlevel_label:

  // Initializes all game objects
  initScene()

  var i i32
  var j i32

  // Game loop
  for bool.and(bool.not(glfw.ShouldClose("window")), bool.not(GAME_OVER)) {
    for i=0; i<4; i++ {
      updateGhostMode(ghosts[i])
    }

    // Check if point was caught
    for i=0; i<points_count; i++ {
      if bool.and(bool.and(i32.eq(points[i].index_x, player.index_x), i32.eq(points[i].index_y, player.index_y)), points[i].active) {
        points[i].active = false
        if i32.eq(points[i].ptype, PATH_CELL_WITH_SUPER_POINT) {
          for j=0; j<4; j++ {
            if bool.not(i32.eq(ghosts[j].status, GHOST_MODE_IN_HOUSE)) {
              ghosts[j].status = GHOST_MODE_FRIGHTENED
              ghosts[j].direction = reverseDirection(ghosts[j].direction)
              GHOST_FRIGHTENED_TIMER = glfw.GetTime()
            }
          }
        }
      }
    }

    if isTimerOver(GHOST_MOVEMENT_TIMER, GHOST_MOVEMENT_LIMIT) {
      for i=0; i<4; i++ {
        moveGhost(ghosts[i])
        checkPlayerGhostCollision(ghosts[i])
      }
      GHOST_MOVEMENT_TIMER = glfw.GetTime()
    }

    // Check if should release ghost
    if isTimerOver(GHOST_RELEASE_TIMER, GHOST_CHASE_LIMIT) {
      // Does not release ghosts during frightned mode
      if isTimerOver(GHOST_FRIGHTENED_TIMER, GHOST_FRIGHTENED_LIMIT) {
        releaseGhost()
      }
      GHOST_RELEASE_TIMER = glfw.GetTime()
    }

    if isLevelCompleted() {
      levelUp()
      goto newlevel_label
    }

    // Render game
    renderGame(program)

		glfw.PollEvents()
    glfw.SwapBuffers("window")
  }
}
